{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/victorpubh/code/intnet-moovie/src/components/Loading.tsx\";\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport styled from 'styled-components';\n\nconst Loading = () => {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Spinner, {\n      icon: faSpinner,\n      spin: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\n\n_c4 = Loading;\n_c = Loading;\nconst Container = styled.div.withConfig({\n  displayName: \"Loading__Container\",\n  componentId: \"sc-1slkf7r-0\"\n})([\"display:flex;width:100%;height:80vh;justify-content:center;align-items:center;\"]);\n_c2 = Container;\nconst Spinner = styled(FontAwesomeIcon).withConfig({\n  displayName: \"Loading__Spinner\",\n  componentId: \"sc-1slkf7r-1\"\n})([\"color:red;\"]);\n_c3 = Spinner;\nexport default Loading;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Loading\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Spinner\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c4;\n\n$RefreshReg$(_c4, \"Loading\");","map":{"version":3,"sources":["/home/victorpubh/code/intnet-moovie/src/components/Loading.tsx"],"names":["Loading","Container","styled","Spinner"],"mappings":";;AAAA,SAAA,SAAA,QAAA,mCAAA;AACA,SAAA,eAAA,QAAA,gCAAA;AAEA,OAAA,MAAA,MAAA,mBAAA;;AAEA,MAAMA,OAAiB,GAAG,MAAM;AAC5B,SAAA,aACI,OAAA,CAAA,SAAA,EAAA;AAAA,IAAA,QAAA,EAAA,aACI,OAAA,CAAA,OAAA,EAAA;AAAS,MAAA,IAAI,EAAb,SAAA;AAA0B,MAAA,IAAI,EAAA;AAA9B,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,CAAA;AAAA,MAAA,YAAA,EAAA;AAAA,KAAA,EAAA,IAAA;AADJ,GAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,IAAA,QAAA,EAAA,YAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GAAA,EADJ,IACI,CADJ;AADJ,CAAA;;MAAMA,O;KAAAA,O;AAQN,MAAMC,SAAS,GAAGC,MAAM,CAAT,GAAGA,CAAH,UAAGA,CAAH;AAAA,EAAA,WAAA,EAAA,oBAAA;AAAA,EAAA,WAAA,EAAA;AAAA,CAAGA,EAAH,CAAf,gFAAe,CAAGA,CAAlB;MAAMD,S;AAQN,MAAME,OAAO,GAAGD,MAAM,CAAT,eAAS,CAANA,CAAH,UAAGA,CAAH;AAAA,EAAA,WAAA,EAAA,kBAAA;AAAA,EAAA,WAAA,EAAA;AAAA,CAAGA,EAAH,CAAb,YAAa,CAAGA,CAAhB;MAAMC,O;AAIN,eAAA,OAAA","sourcesContent":["import { faSpinner } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Loading: React.FC = () => {\n    return (\n        <Container>\n            <Spinner icon={faSpinner} spin />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    display: flex;\n    width: 100%;\n    height: 80vh;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst Spinner = styled(FontAwesomeIcon)`\n    color: red;\n`;\n\nexport default Loading"]},"metadata":{},"sourceType":"module"}