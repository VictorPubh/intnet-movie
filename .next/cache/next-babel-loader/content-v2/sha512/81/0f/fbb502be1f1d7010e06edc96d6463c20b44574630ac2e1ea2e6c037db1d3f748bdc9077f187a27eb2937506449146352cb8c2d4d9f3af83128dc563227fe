{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/victorpubh/code/intnet-moovie/src/contexts/themeContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nexport const ThemeContext = /*#__PURE__*/createContext();\n\nconst ThemeProvider = ({\n  children\n}) => {\n  _s2();\n\n  _s();\n\n  const {\n    0: mode,\n    1: setMode\n  } = useState('light');\n  const value = {\n    mode\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(ThemeProvider, \"gpjdSkfDDntiYcM/QCOxwDXQ3dc=\");\n\n_c2 = ThemeProvider;\n\n_s(ThemeProvider, \"Vs8mkvwR7CZ7J6LLj80enWdttac=\");\n\n_c = ThemeProvider;\nexport default ThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c2;\n\n$RefreshReg$(_c2, \"ThemeProvider\");","map":{"version":3,"sources":["/home/victorpubh/code/intnet-moovie/src/contexts/themeContext.tsx"],"names":["ThemeContext","createContext","ThemeProvider","children","setMode","useState","value","mode"],"mappings":";;;;;;;AAAA,SAAA,aAAA,EAAA,QAAA,QAAA,OAAA;AAEA,OAAO,MAAMA,YAAY,GAAA,aAAGC,aAArB,EAAA;;AAEP,MAAMC,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAAA,EAAA,EAAA;;AAC9C,QAAM;AAAA,OAAA,IAAA;AAAA,OAAOC;AAAP,MAAkBC,QAAQ,CAAhC,OAAgC,CAAhC;AAEA,QAAMC,KAAK,GAAG;AAAEC,IAAAA;AAAF,GAAd;AACA,SAAA,aAAO,OAAA,CAAC,YAAD,CAAA,QAAA,EAAA;AAAuB,IAAA,KAAK,EAA5B,KAAA;AAAA,IAAA,QAAA,EAAuCJ;AAAvC,GAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,IAAA,QAAA,EAAA,YAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GAAA,EAAP,IAAO,CAAP;AAJJ,CAAA;;IAAMD,a;;MAAAA,a;;GAAAA,a;;KAAAA,a;AAON,eAAA,aAAA","sourcesContent":["import React, { createContext, useState } from 'react'\n\nexport const ThemeContext = createContext()\n\nconst ThemeProvider: React.FC = ({ children }) => {\n    const [mode, setMode] = useState('light')\n\n    const value = { mode }\n    return <ThemeContext.Provider value={value}>{ children }</ThemeContext.Provider>\n}\n\nexport default ThemeProvider"]},"metadata":{},"sourceType":"module"}