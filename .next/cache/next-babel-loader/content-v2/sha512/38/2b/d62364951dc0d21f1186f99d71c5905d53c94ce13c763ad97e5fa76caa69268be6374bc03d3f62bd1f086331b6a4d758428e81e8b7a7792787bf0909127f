{"ast":null,"code":"var _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/victorpubh/code/intnet-moovie/src/contexts/themeContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport theme from '../styles/theme';\nexport const ThemeContext = /*#__PURE__*/createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  _s3();\n\n  _s();\n\n  const {\n    0: mode,\n    1: setMode\n  } = useState('light');\n  const value = {\n    mode\n  };\n  const custom = theme[mode];\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: custom,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 13\n  }, this);\n};\n\n_s3(AppProvider, \"gpjdSkfDDntiYcM/QCOxwDXQ3dc=\");\n\n_c2 = AppProvider;\n\n_s(AppProvider, \"Vs8mkvwR7CZ7J6LLj80enWdttac=\");\n\n_c = AppProvider;\nexport const useTheme = () => {\n  _s4();\n\n  _s2();\n\n  const context = useContext(ThemeContext);\n  const {\n    mode\n  } = context;\n  return {\n    mode\n  };\n};\n\n_s4(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport default AppProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c2;\n\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"sources":["/home/victorpubh/code/intnet-moovie/src/contexts/themeContext.tsx"],"names":["ThemeContext","createContext","AppProvider","children","setMode","useState","value","mode","custom","theme","useTheme","context","useContext"],"mappings":";;;;;;;;;AAAA,SAAA,aAAA,EAAA,UAAA,EAAA,QAAA,QAAA,OAAA;AACA,SAAA,aAAA,QAAA,mBAAA;AACA,OAAA,KAAA,MAAA,iBAAA;AAEA,OAAO,MAAMA,YAAY,GAAA,aAAGC,aAArB,EAAA;;AAEP,MAAMC,WAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAAA,EAAA,EAAA;;AAC5C,QAAM;AAAA,OAAA,IAAA;AAAA,OAAOC;AAAP,MAAkBC,QAAQ,CAAhC,OAAgC,CAAhC;AAEA,QAAMC,KAAK,GAAG;AAAEC,IAAAA;AAAF,GAAd;AACA,QAAMC,MAAc,GAAGC,KAAK,CAA5B,IAA4B,CAA5B;AACA,SAAA,aAAQ,OAAA,CAAC,YAAD,CAAA,QAAA,EAAA;AAAuB,IAAA,KAAK,EAA5B,KAAA;AAAA,IAAA,QAAA,EAAA,aACI,OAAA,CAAA,aAAA,EAAA;AAAe,MAAA,KAAK,EAApB,MAAA;AAAA,MAAA,QAAA,EACMN;AADN,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA,KAAA,EAAA,IAAA;AADJ,GAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,IAAA,QAAA,EAAA,YAAA;AAAA,IAAA,UAAA,EAAA,EAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GAAA,EAAR,IAAQ,CAAR;AALJ,CAAA;;IAAMD,W;;MAAAA,W;;GAAAA,W;;KAAAA,W;AAYN,OAAO,MAAMQ,QAAQ,GAAG,MAAM;AAAA;;AAAA,EAAA,GAAA;;AAC1B,QAAMC,OAAO,GAAGC,UAAU,CAA1B,YAA0B,CAA1B;AACA,QAAM;AAAEL,IAAAA;AAAF,MAAN,OAAA;AACA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AAHG,CAAA;;IAAMG,Q;;IAAAA,Q;;AAMb,eAAA,WAAA","sourcesContent":["import React, { createContext, useContext, useState } from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport theme from '../styles/theme'\n\nexport const ThemeContext = createContext()\n\nconst AppProvider: React.FC = ({ children }) => {\n    const [mode, setMode] = useState('light')\n\n    const value = { mode }\n    const custom: Object = theme[mode]\n    return (<ThemeContext.Provider value={value}>\n                <ThemeProvider theme={custom}>\n                    { children }\n                </ThemeProvider>\n            </ThemeContext.Provider>)\n}\n\nexport const useTheme = () => {\n    const context = useContext(ThemeContext)\n    const { mode } = context\n    return { mode }\n}\n\nexport default AppProvider"]},"metadata":{},"sourceType":"module"}